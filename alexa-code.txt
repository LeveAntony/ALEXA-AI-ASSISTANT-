import speech_recognition as sr
import pyttsx3
import pywhatkit
import datetime
import requests
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import wikipedia

# Initialize the voice recognizer and engine
listener = sr.Recognizer()
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)

def talk(text):
    engine.say(text)
    engine.runAndWait()

def get_news_headlines():
    news_api_key = '5f26b160558a456ab24a265a767dbbf9'  # Replace with your news API key
    news_url = f'https://newsapi.org/v2/top-headlines?country=us&apiKey={news_api_key}'

    try:
        response = requests.get(news_url)
        news_data = response.json()

        if news_data.get('status') == 'ok':
            articles = news_data.get('articles')

            if articles:
                headlines = [article['title'] for article in articles]
                talk("Here are the latest news headlines:")
                for idx, headline in enumerate(headlines):
                    talk(f"{idx + 1}. {headline}")
            else:
                talk("I couldn't find any news headlines at the moment.")
        else:
            talk("Sorry, I couldn't fetch the news at this time. Please try again later.")

    except Exception as e:
        print(f"An error occurred while fetching news: {str(e)}")
        talk("Sorry, I encountered an error while fetching news updates.")

def take_command():
    try:
        with sr.Microphone() as source:
            print("Try saying something...")
            voice = listener.listen(source)
            command = listener.recognize_google(voice)
            command = command.lower()
            if 'alexa' in command:
                command = command.replace('alexa', '')
                print(command)
    except:
        pass
    return command

def get_weather(location):
    if not location:
        talk("Please provide a valid location for the weather.")
        return

    weather_api_key = 'YOUR_WEATHER_API_KEY'
    weather_url = f'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={weather_api_key}'

    try:
        response = requests.get(weather_url)
        response.raise_for_status()

        weather_data = response.json()

        if response.status_code == 200:
            main_data = weather_data['main']
            weather_description = weather_data['weather'][0]['description']
            temperature = main_data['temp']
            humidity = main_data['humidity']

            weather_info = f"The weather in {location} is {weather_description}. The temperature is {temperature} Kelvin, with a humidity of {humidity}%."

            talk(weather_info)
        else:
            talk(f"Sorry, I couldn't fetch weather information for {location}.")
    except requests.exceptions.RequestException as req_err:
        print(f"Request Error: {req_err}")
        talk("Sorry, the weather server API is down for maintenance. Please try again later.")
    except Exception as e:
        print(f"An error occurred while fetching weather: {str(e)}")
        talk("Sorry, I encountered an error while fetching weather information.")

def adjust_volume(level):
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))

    current_volume = volume.GetMasterVolumeLevelScalar()
    if level == "up":
        new_volume = min(1.0, current_volume + 0.1)
    elif level == "down":
        new_volume = max(0.0, current_volume - 0.1)
    else:
        try:
            new_volume = float(level) / 100.0
        except ValueError:
            talk("Invalid volume level. Please say 'set volume to' followed by a number between 1 and 100.")
            return
    volume.SetMasterVolumeLevelScalar(new_volume, None)
    talk(f"Volume set to {int(new_volume * 100)}%")

def get_joke():
    joke_url = 'https://official-joke-api.appspot.com/jokes/random'

    try:
        response = requests.get(joke_url)
        joke_data = response.json()

        if response.status_code == 200:
            setup = joke_data['setup']
            punchline = joke_data['punchline']
            joke = f"{setup} {punchline}"
            talk("Here's a joke for you:")
            talk(joke)
        else:
            talk("Sorry, I couldn't fetch a joke at the moment.")
    except requests.exceptions.RequestException as req_err:
        print(f"Request Error: {req_err}")
        talk("Sorry, there was a problem with the request. Please try again later.")
    except Exception as e:
        print(f"An error occurred while fetching a joke: {str(e)}")
        talk("Sorry, I encountered an error while fetching a joke.")


def get_person_info(person_name):
    try:
        summary = wikipedia.summary(person_name)
        talk(f"Here is some information about {person_name}: {summary}")
    except wikipedia.exceptions.DisambiguationError as e:
        # Handle disambiguation errors (when there are multiple matching results)
        talk("There are multiple matches for your query. Please be more specific.")
    except wikipedia.exceptions.HTTPTimeoutError as e:
        # Handle HTTP timeout errors
        talk("Sorry, I couldn't fetch information from Wikipedia due to a timeout error.")
    except wikipedia.exceptions.PageError as e:
        # Handle page not found errors
        talk(f"Sorry, I couldn't find information about {person_name} on Wikipedia.")

# Use get_person_info function in your run_katana function as before


# Use get_person_info function in your run_katana function as before



def run_katana():
    command = take_command()
    print(command)
    if 'play' in command:
        song = command.replace('play', '')
        talk('Playing ' + song)
        pywhatkit.playonyt(song)
    elif 'time' in command:
        time = datetime.datetime.now().strftime('%I:%M %p')
        talk('It\'s ' + time)
    elif 'news' in command:
        get_news_headlines()
    elif 'weather' in command:
        location = command.replace('weather', '').strip()
        get_weather(location)
    elif 'joke' in command:
        get_joke()
    elif 'information about' in command:
        person_name = command.replace('info about', '').strip()
        get_person_info(person_name)
    elif 'set volume' in command:
        adjust_volume(command.split("to")[-1].strip())
    else:
        talk("I'm not sure what you're asking. Please try again.")

run_katana()
